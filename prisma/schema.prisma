generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI")
}

model Comment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  content String
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@map("comments")
}

model OauthProvider {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  providerId   String
  providerName String
  userId       String  @db.ObjectId
  user         User?   @relation(fields: [userId], references: [id])

  @@map("oauthproviders")
}

enum UserPermission {
  GET_USERS
}

model Permission {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @db.Date
  name      UserPermission
  roles     Role[] @relation(fields: [roleIDs], references: [id])
  roleIDs   String[] @db.ObjectId
  updatedAt DateTime @db.Date

  @@map("permissions")
}

model Post {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  content Json?
  slug    Json?  @unique
  title   Json?
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
  comments Comment[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@fulltext([title(sort: Desc), content])

  @@map("posts")
}

enum RoleName {
  ADMIN
  USER
}

model Role {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @db.Date
  name          RoleName @default(USER)
  users         User[]  @relation(fields: [userIDs], references: [id])
  userIDs       String[] @db.ObjectId
  permissionIDs String[] @db.ObjectId
  permissions   Permission[] @relation(fields: [permissionIDs], references: [id])
  updatedAt     DateTime @db.Date

  @@map("roles")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  avatarURL      String?
  createdAt     DateTime @default(now())
  email          String    @unique
  firstName      String
  isVerified     Boolean
  lastName       String
  oauthProviders OauthProvider[]
  posts          Post[]
  password       String
  phoneNumber    String?
  roleIDs        String[] @db.ObjectId
  roles          Role[] @relation(fields: [roleIDs], references: [id])
  salt           String
  updatedAt      DateTime @updatedAt

  @@map("users")
}

